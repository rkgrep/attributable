{"name":"Attributable","tagline":"Fast and elegant way to work with PHP objects","body":"## Attributable\r\n\r\n[![Build Status](https://travis-ci.org/rkgrep/attributable.svg)](https://travis-ci.org/rkgrep/attributable)\r\n[![Latest Stable Version](https://poser.pugx.org/rkgrep/attributable/v/stable.svg)](https://packagist.org/packages/rkgrep/attributable)\r\n[![Latest Unstable Version](https://poser.pugx.org/rkgrep/attributable/v/unstable.svg)](https://packagist.org/packages/rkgrep/attributable)\r\n[![License](https://poser.pugx.org/rkgrep/attributable/license.svg)](https://packagist.org/packages/rkgrep/attributable)\r\n\r\n> **Note:** Original idea by Taylor Otwell in [Laravel Framework](https://github.com/laravel/framework).\r\n\r\nThe package includes traits which allow fluent and elegant way to work with internal object property arrays.\r\n\r\n## Installation\r\n\r\nInstall the package with composer.\r\n````\r\ncomposer require rkgrep/attributable\r\n````\r\n\r\nApply the trait to any class you need.\r\n\r\n````php\r\nclass Foo {\r\n    \r\n    use rkgrep\\Attributable;\r\n    \r\n}\r\n````\r\n\r\n````php\r\nclass Bar {\r\n    \r\n    use rkgrep\\Fillable;\r\n    \r\n}\r\n````\r\n\r\n## Usage\r\n\r\n### Attributable trait\r\n\r\n`Attributable` provides different access and assignment ways.\r\n\r\nAssign internal variables via property or method call\r\n\r\n````php\r\n$foo->var1 = 1;\r\n$foo->var2(2);\r\n````\r\n\r\nAccess variables via property\r\n\r\n````php\r\necho $foo->var1;\r\necho $foo->var2;\r\n````\r\n\r\nProvide fallback value via `get` method\r\n\r\n````php\r\n$foo->get('var4', 'fallback');\r\n$foo->get('var5', function() { return 'closure result'; });\r\n````\r\n\r\nGet all internal variables via `getAttributes` method\r\n\r\n````php\r\n$all = $foo->getAttributes();\r\n````\r\n\r\nMethod call without arguments assigns `true`\r\n\r\n````php\r\n$foo->viewable();\r\ntrue == $foo->viewable;\r\n````\r\n\r\nChain methods for fast assignment\r\n\r\n````php\r\n$user->first_name('John')->last_name('Doe')->admin();\r\n````\r\n\r\n### Fillable trait\r\n\r\n`Fillable` provides chaining assignment of variables or groups of variables.\r\n\r\nMass assign atributes with `fill` method\r\n\r\n````php\r\n$user->fill(['name' => 'Admin', 'email' => 'admin@example.com']);\r\n````\r\n\r\nOverwrite or reassign control via second parameter\r\n\r\n````php\r\n$user->fill(['name' => 'John Doe']); // Name changed, email remains untouched\r\n$user->fill(['email' => 'other@example.com'], false); // Disabled merging - old values are dropped\r\n````\r\n\r\nFill specific properties with `with` method\r\n\r\n````php\r\n$user->with('password', md5('password'));\r\n````\r\n\r\nPrevent overriding with third parameter\r\n\r\n````php\r\n$user->with('password', '', false); // Password remains untouched\r\n````\r\n\r\nAssign multiple variables\r\n\r\n````php\r\n$user->with(['friends' => ['Mike', 'Dave'], 'girlfriend' => 'Jane']);\r\n$user->with(['siblings' => [], 'girlfriend' => 'Mary'], null, false); // Overriding disabled - only siblings are touched\r\n````\r\n\r\nChain method calls\r\n\r\n````php\r\n$post->fill(['title' => 'Lorem Ipsum'])->with('views', 5)->with('likes', 3);\r\n````\r\n\r\n## Interfaces\r\n\r\nAny class with `Attributable` trait applied implements `ArrayAccess` and `JsonSerializable`.\r\nIf you use *illuminate/support* package you can also apply `Arrayable` and `Jsonable` interfaces.\r\n\r\n````php\r\nclass Bar implements ArrayAccess, JsonSerializable, Arrayable, Jsonable {\r\n\r\n    use rkgrep\\Attributable;\r\n\r\n}\r\n\r\n$bar = new Bar();\r\n$bar->value('test');\r\n\r\n$arrayValue = $bar['value'];\r\n$bar['value'] = 'new';\r\n$json = json_encode($bar); // returns '{\"value\": \"new\"}'\r\n\r\n$array = $bar->toArray();\r\n$json = $bar->toJson();\r\n````\r\n\r\n## License\r\n\r\n**Attributable** package is open-sourced package licensed under the [MIT license](http://opensource.org/licenses/MIT).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}